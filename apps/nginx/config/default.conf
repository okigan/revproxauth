server {
    listen 80;
    server_name _;

    # Auth backend location (internal only)
    location = /auth {
        internal;
        proxy_pass http://py-radius-auth:5000/auth;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header Host $host;
        proxy_set_header Cookie $http_cookie;
    }

    # Login page (no auth required)
    location = /login {
        proxy_pass http://py-radius-auth:5000/login;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Port $server_port;
    }

    # Login POST handler (no auth required)
    location = /do-login {
        proxy_pass http://py-radius-auth:5000/do-login;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Port $server_port;
    }

    # Logout (no auth required)
    location = /logout {
        proxy_pass http://py-radius-auth:5000/logout;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Port $server_port;
    }

    # Protected routes - require authentication
    location / {
        # Authenticate using auth backend
        auth_request /auth;
        
        # Pass authentication result headers to upstream
        auth_request_set $auth_user $upstream_http_x_auth_user;
        proxy_set_header X-Auth-User $auth_user;
        
        # Redirect to login if not authenticated
        error_page 401 = @error401;
        
        # Proxy to upstream application
        proxy_pass http://whoami;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 86400;
    }

    # Redirect to login page with next parameter
    location @error401 {
        return 302 $scheme://$http_host/login?next=$request_uri;
    }
}
